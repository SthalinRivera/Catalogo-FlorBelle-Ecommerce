generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int        @id @default(autoincrement())
  name        String
  email       String     @unique
  password    String?
  phoneNumber String?
  avatarUrl   String? // ✅ Imagen de perfil
  isActive    Boolean    @default(true) // ✅ Estado de cuenta
  role        Role       @relation(fields: [roleId], references: [id])
  roleId      Int
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  orders      Order[]
  favorites   Favorite[]
  reviews     Review[]
  addresses   Address[]  @relation("UserAddresses")
  visits      Visit[] // ← Añade este campo para la relación inversa
}

model Role {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  users     User[]
  createdAt DateTime @default(now())
}

model Product {
  id          Int         @id @default(autoincrement())
  name        String
  slug        String?     @unique // ✅ Slug para URL
  description String
  price       Decimal     @db.Decimal(10, 2)
  stock       Int
  imageUrl    String
  gallery     String[] // ✅ Galería de imágenes
  sku         String?     @unique // ✅ SKU de inventario
  isPublished Boolean     @default(true) // ✅ Estado de publicación
  isFeatured  Boolean     @default(false) // ✅ Producto destacado
  category    Category    @relation(fields: [categoryId], references: [id])
  categoryId  Int
  favorites   Favorite[]
  reviews     Review[]
  orderItems  OrderItem[]
  promotions  Promotion[] // ✅ Uno a muchos
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model Category {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  slug        String?   @unique // ✅ Slug para URL
  imageUrl    String? // ✅ Imagen de categoría
  bannerUrl   String? // ✅ Imagen tipo banner
  description String? // ✅ Descripción
  products    Product[]
}

model Favorite {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  product   Product  @relation(fields: [productId], references: [id])
  productId Int
  createdAt DateTime @default(now())
}

model Order {
  id          Int         @id @default(autoincrement())
  user        User?       @relation(fields: [userId], references: [id])
  userId      Int?
  clientName  String? // Nuevo campo para pedidos por WhatsApp
  clientPhone String? // Nuevo campo para pedidos por WhatsApp
  total       Decimal     @db.Decimal(10, 2)
  status      OrderStatus @default(PENDING)
  orderItems  OrderItem[]
  coupon      Coupon?     @relation(fields: [couponId], references: [id])
  couponId    Int?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  source      String?     @default("WEB") // Puedes añadir "WHATSAPP" para nuevos pedidos
}

enum OrderStatus {
  PENDING
  PROCESSED
  SHIPPED
  DELIVERED
  CANCELED
}

model OrderItem {
  id        Int     @id @default(autoincrement())
  order     Order   @relation(fields: [orderId], references: [id])
  orderId   Int
  product   Product @relation(fields: [productId], references: [id])
  productId Int
  quantity  Int
  price     Decimal @db.Decimal(10, 2)
}

model Coupon {
  id             Int      @id @default(autoincrement())
  code           String   @unique
  description    String?
  discount       Decimal  @db.Decimal(5, 2)
  isPercentage   Boolean  @default(true)
  usageLimit     Int
  usedCount      Int      @default(0)
  minOrderTotal  Decimal? @db.Decimal(10, 2)
  startDate      DateTime
  expirationDate DateTime
  isActive       Boolean  @default(true)
  orders         Order[]
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model Review {
  id        Int      @id @default(autoincrement())
  product   Product  @relation(fields: [productId], references: [id])
  productId Int
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  rating    Int // Valor entre 1 y 5
  comment   String?
  createdAt DateTime @default(now())
}

model Address {
  id         Int      @id @default(autoincrement())
  user       User     @relation("UserAddresses", fields: [userId], references: [id])
  userId     Int
  street     String
  city       String
  state      String? // ✅ Nuevo campo
  country    String
  postalCode String
  isDefault  Boolean  @default(false) // ✅ Dirección por defecto
  createdAt  DateTime @default(now())
}

model Promotion {
  id           Int      @id @default(autoincrement())
  product      Product  @relation(fields: [productId], references: [id])
  productId    Int
  title        String
  description  String?
  discount     Decimal  @db.Decimal(5, 2)
  isPercentage Boolean  @default(true)
  startDate    DateTime
  endDate      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Visit {
  id        Int      @id @default(autoincrement())
  path      String?
  ip        String?
  userAgent String?
  userId    Int? // Opcional: si quieres asociar visitas a usuarios registrados
  user      User?    @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
}
