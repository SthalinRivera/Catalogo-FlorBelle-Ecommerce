  generator client {
    provider = "prisma-client-js"
  }

  datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
  }

  model User {
    id          Int        @id @default(autoincrement())
    name        String
    email       String     @unique
    password    String?
    phoneNumber String? // Nuevo campo para el n√∫mero de celular
    role        Role       @relation(fields: [roleId], references: [id])
    roleId      Int
    createdAt   DateTime   @default(now())
    updatedAt   DateTime   @updatedAt
    orders      Order[]
    favorites   Favorite[]
    reviews     Review[]
    addresses   Address[]  @relation("UserAddresses")
  }

  model Role {
    id        Int      @id @default(autoincrement())
    name      String   @unique
    users     User[]
    createdAt DateTime @default(now())
  }

  model Product {
    id          Int         @id @default(autoincrement())
    name        String
    description String
    price       Decimal     @db.Decimal(10, 2)
    stock       Int
    imageUrl    String
    category    Category    @relation(fields: [categoryId], references: [id])
    categoryId  Int
    favorites   Favorite[]
    reviews     Review[]
    orderItems  OrderItem[]
    createdAt   DateTime    @default(now())
    updatedAt   DateTime    @updatedAt
  }

  model Category {
    id       Int       @id @default(autoincrement())
    name     String    @unique
    products Product[]
  }

  model Favorite {
    id        Int      @id @default(autoincrement())
    user      User     @relation(fields: [userId], references: [id])
    userId    Int
    product   Product  @relation(fields: [productId], references: [id])
    productId Int
    createdAt DateTime @default(now())
  }

  model Order {
    id         Int         @id @default(autoincrement())
    user       User        @relation(fields: [userId], references: [id])
    userId     Int
    total      Decimal     @db.Decimal(10, 2)
    status     OrderStatus @default(PENDING)
    orderItems OrderItem[]
    coupon     Coupon?     @relation(fields: [couponId], references: [id])
    couponId   Int?
    createdAt  DateTime    @default(now())
    updatedAt  DateTime    @updatedAt
  }

  enum OrderStatus {
    PENDING
    PROCESSED
    SHIPPED
    DELIVERED
    CANCELED
  }

  model OrderItem {
    id        Int     @id @default(autoincrement())
    order     Order   @relation(fields: [orderId], references: [id])
    orderId   Int
    product   Product @relation(fields: [productId], references: [id])
    productId Int
    quantity  Int
    price     Decimal @db.Decimal(10, 2)
  }

  model Coupon {
    id             Int      @id @default(autoincrement())
    code           String   @unique
    discount       Decimal  @db.Decimal(5, 2)
    usageLimit     Int
    orders         Order[]
    expirationDate DateTime
  }

  model Review {
    id        Int      @id @default(autoincrement())
    product   Product  @relation(fields: [productId], references: [id])
    productId Int
    user      User     @relation(fields: [userId], references: [id])
    userId    Int
    rating    Int // Valor entre 1 y 5
    comment   String?
    createdAt DateTime @default(now())
  }

  model Address {
    id         Int      @id @default(autoincrement())
    user       User     @relation("UserAddresses", fields: [userId], references: [id])
    userId     Int
    street     String
    city       String
    country    String
    postalCode String
    createdAt  DateTime @default(now())
  }
